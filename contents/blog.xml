<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Darius A. Görgen</title>
<link>https://www.dariusgoergen.com/contents/blog.html</link>
<atom:link href="https://www.dariusgoergen.com/contents/blog.xml" rel="self" type="application/rss+xml"/>
<description>Geoinformation and Environmental Sciences</description>
<image>
<url>https://www.dariusgoergen.com/contents/img/dg.png</url>
<title>Darius A. Görgen</title>
<link>https://www.dariusgoergen.com/contents/blog.html</link>
<height>145</height>
<width>144</width>
</image>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 30 Aug 2022 15:19:00 GMT</lastBuildDate>
<item>
  <title>Migrating to Quarto</title>
  <dc:creator>Darius A. Görgen</dc:creator>
  <link>https://www.dariusgoergen.com/contents/blog/2022-08-30-quarto/index.html</link>
  <description><![CDATA[ 



<p>I recently migrated this very website that you are seeing to the <a href="https://quarto.org/"><code>Quarto</code></a> engine. With this post, I want to share some of my experiences of the migration process as well as some general thoughts on website generation with <code>Quarto</code>. To start with, it has really been a fun experience to set up this website using <code>Quarto</code>. Even though the tool is quite new and has only been publicly announced at <a href="https://quarto.org/docs/blog/posts/2022-06-21-rstudio-conf-2022-quarto/">rstudio::conf(2022)</a> some time ago, it really is thoughtfully engineered, feature rich and easy to use.</p>
<p>To set up my motivation to migrate to <code>Quarto</code>, let me give you some insights of how I created content for my website before. I have been using the quite familiar <a href="http://sergiokopplin.github.io/indigo/">Indigo</a> theme base on <code>Jekyll</code> for some time. I liked it very much for its minimalist look and feel. However, creating content and get it “out there” was not quite a minimalist experience for me. Partly, that was due to my desire to feature both, content on R and Python, and very likely also due to my inexperience with websites more general. In order for you to get the picture, let me first explain how I created content using <code>Jekyll</code> and then what changed for me now that I am using <code>Quarto</code>.</p>
<section id="the-tidious-way-to-create-content" class="level2">
<h2 class="anchored" data-anchor-id="the-tidious-way-to-create-content">The tidious way to create content…</h2>
<p>In my previous set up using <code>Jekyll</code> I had a <code>_drafts</code> directory. There I would write some R Markdown files drafting my posts. Thanks to the awesome <code>{reticulate}</code> package I could already use Python in these R Markdown files using a virtual environment. I would add the following <code>yaml</code> header to all drafts:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_document</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keep_md</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>That would tell the knitr engine to create both, a <code>.html</code> and a <code>.md</code> file. The files would all be rendered within the <code>_drafts</code> directory. I then would have to manually create another <code>&lt;post&gt;-header.md</code> file including the header information for the post I was currently working on, but nothing else:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some title"</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some more description"</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> post</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 2020-05-10 10:00</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tag</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> msg</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gtiff</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">headerImage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hidden</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # don't count this post in blog pagination</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">category</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> blog or project?</span></span>
<span id="cb2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> darius</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>The template repository that I was using thankfully included a <code>bash</code> file that would then allow me to select the name of a draft post. This script would take the <code>.md</code> that was outputted by <code>{knitr}</code>, add the <code>yaml</code> header that I created and then copy this new file over to the <code>_posts</code> directory from where the website would be available once checked out to GitHub. Referring to assets that should show up in a post was tedious and more than once error-prone. As you can imagine, I was very much keen to use an alternative, simpler way to handle my website. <em>Entrance Quarto!</em></p>
</section>
<section id="designing-a-website-with-quarto" class="level2">
<h2 class="anchored" data-anchor-id="designing-a-website-with-quarto">Designing a website with <code>Quarto</code></h2>
<p>The general directory structure of my <code>Quarto</code> website (restricted here to the most important parts) is actually quite simple:</p>
<pre><code>.
├── contents
      ├── blog
      └──  projects
├── _quarto.yaml
├── index.qmd
├── renv
└── pyenv</code></pre>
<p>I structure my contents into a blog and some information snippets about projects I have been working on. Each of those contain single directories for each post. Within a post directory, I include an <code>index.qmd</code> file and all assets that are to be referenced by this post. Note, that within the <code>.qmd</code> I can use R or Python at ease. When rendering, Quarto will automatically activate the virtual environment <code>pyenv</code> for Python code or the <code>renv</code> for R files (more on that later). The main landing page is <code>index.qmd</code> thus it is found in the top-level of the repository. Website-wide configurations, like the navbar, are included in <code>_quarto.yaml</code>. It is there that I specified to freeze the rendering of posts. That way quarto will only try to re-render posts if it finds changes in the source code. If that is not the case, the previous outputs will simply be copied to the <code>_site</code> directory where the rendered website is found. This is a very useful behavior, especially over long-time frames when package version changes might make it difficult to re-render older posts.</p>
<p>Within each <code>.qmd</code>, I now include the <code>yaml</code> header that I had to create manually before. So instead of actually 4 different files that I created to publish a single post that was then copied to the right location, I now use a single-source-of-truth, if you will, that is automatically rendered if needed once I issue <code>quarto render</code> to the command line. This really is a significant improvement of my personal workflow to put out new content! The source repository is also much cleaner and easier to argue about and troubleshoot if something goes wrong.</p>
</section>
<section id="seamless-integration-of-python-and-r-in-the-same-project" class="level2">
<h2 class="anchored" data-anchor-id="seamless-integration-of-python-and-r-in-the-same-project">Seamless integration of Python and R in the same project</h2>
<p>I am amazed by the seamless integration of both Python and R into a single project. For the R side, I am using <code>{renv}</code> for the housekeeping of packages. For Python I simply created a virtual environment via <code>python3 -m venv pyenv</code> to create a virtual environment within the project directory. Quarto will automatically activate this environment when executing Python code. I (or others) can even set up the project easily on a different machine by updating the <code>requirements.txt</code> every once in a while by using <code>python3 -m pip freeze &gt; requirements.txt</code>. I mentioned earlier, that the freeze option is a useful feature over long time periods. It is also a very useful when collaboration with others on a website potentially using R and Python. Every contributor might only make small changes to single parts of the website. Using the freeze options ensures that the website as a whole stays intact, even for different language or version requirements between the posts.</p>
</section>
<section id="publishing-with-quarto" class="level2">
<h2 class="anchored" data-anchor-id="publishing-with-quarto">Publishing with Quarto</h2>
<p>My first idea to publish the website was using GitHub Actions to automatically build the site once changes to the main branch are checked out. While in principal this is possible, this approach has two major drawbacks. First, when version requirements are different between some posts this approach will fail when trying to set up the environment on GitHub Actions. This could be mitigated by ensuring that all posts are kept up-to-date with package developments, but maintaining this website should not be a full-time job. Second, setting up both the R and Python environment on GitHub actions takes quite some time and I would not like to wait about 30 minutes between checking out some changes and the deployment of the website. I briefly was thinking about changing the OS of the workflow to MacOS or Windows, hoping that using binaries would speed up the process. However, Quarto comes with a very nice feature which allows me to directly publish to the <code>gh-pages</code> branch from my local machine. Once I am satisfied with my changes I first checkout to the main branch. Then I issue <code>quarto publish gh-pages</code> and because of the freeze option being enabled, this quickly pushes the website to GitHub where it is then deployed. This actually saves some significant computation times on GitHub servers reducing the carbon footprint of this website.</p>
</section>
<section id="round-up" class="level2">
<h2 class="anchored" data-anchor-id="round-up">Round up</h2>
<p>Setting up a website using <code>Quarto</code> and customizing it has been a very fun experience. The design of the tool is very user-friendly and it helped me to improve the way I publish on this website. The freeze option is potentially saving an incredible amount of headaches for both single contributors who have to maintain state over longer periods of time and collaborators potentially using different programming languages. Posit (formerly known as RStudio) truly advances the way how we can work in multi-lingual projects and reduces the overhead associated with sharing content. I have been a great fan of R Markdown over the last couple of years. R Markdown has grown for over 10 years now. Quarto is meant to be its successor and I can’t wait to see what else will be possible with it over the next 10 years!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Quarto</category>
  <guid>https://www.dariusgoergen.com/contents/blog/2022-08-30-quarto/index.html</guid>
  <pubDate>Tue, 30 Aug 2022 15:19:00 GMT</pubDate>
  <media:content url="https://d33wubrfki0l68.cloudfront.net/1e13e2f2b4d1760d131ad2be5096e105573341e2/db099/blog/announcing-quarto-a-new-scientific-and-technical-publishing-system/thumbnail_huc2394eec6c3beee37cf037e067ab5abf_72127_2220x0_resize_q75_box.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R API to download FAO’s WaPOR datasets</title>
  <dc:creator>Darius A. Görgen</dc:creator>
  <link>https://www.dariusgoergen.com/contents/blog/2020-10-31-wapoR/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-10-31-wapoR/wapor.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Screenshot</figcaption>
</figure>
</div>
<p><em>Screenshot of from the <a href="https://wapor.apps.fao.org/home/WAPOR_2/1">WaPOR</a> website</em></p>
<section id="what-is-it-about" class="level3">
<h3 class="anchored" data-anchor-id="what-is-it-about">What is it about?</h3>
<p>The <a href="https://wapor.apps.fao.org/home/WAPOR_2/1">WaPOR</a> project by FAO offers some awesome remote sensing products concerned with water usage in agriculture on the African continent. A great variety of different products, among them net- and gross-biomass-water-productivity, evaporation, transpiration, and interception as well as biomass production, are provided at a spatial resolution ranging between 250 meters up-to 30 meters for selected agricultural regions.</p>
<p>There are already some Python packages out there that allow users to programmatically access the WaPOR data portal such as <a href="https://github.com/HKV-products-services/hkvwaporpy">hkvwaporpy</a> or <a href="https://github.com/wateraccounting/IHEWAwapor">IHEWAwapor</a>. However, I was not able to find similar functionality for R users. So I just went on and wrote an experimental package in R, which can be used to download raster data.</p>
</section>
<section id="what-can-it-do" class="level3">
<h3 class="anchored" data-anchor-id="what-can-it-do">What can it do?</h3>
<p>To install and use the package, you should utilize <code>remotes</code> functionality.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wapoR"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installed.packages</span>()[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]){</span>
<span id="cb1-2">  remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goergen95/wapoR"</span>)</span>
<span id="cb1-3">}</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(wapoR)</span></code></pre></div>
</div>
<p>From there, it is quite straightforward to query available collections. Note that there are other collections available for which, in principal, it should be possible to download the data in the same way. But this package was primarily intended to interact with the WaPOR collections.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wapor_collections</span>()</span>
<span id="cb2-2">cols[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(cols),)),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            code
28          WPOP
27         WATER
26       WAPOR_2
25           RVF
24        RSCROP
23      RICCAR_2
22        RICCAR
21          RDMS
20          NMME
19 NATURAL_EARTH
18          NASA
17          GLW4
16          GLW3
15           GLW
14        GLEAM3
13   GISMGR_TEST
12       GAEZ_V4
11     GAEZ_2015
10      FROM_GLC
9        FAOSTAT
8           DLMF
7           CRTB
6      CROPWATCH
5         CHIRPS
4            C3S
3        C2ATLAS
2           ASIS
1       AQUAMAPS
                                                                       caption
28                                                            WorldPop project
27                                                                  Water Data
26                           FAO Water Productivity Open-access portal (WaPOR)
25                                                           Rift Valley Fever
24                     Crop Pest and Disease Monitoring and Forecasting System
23                              Regional Arab Climate Change Assessment Report
22                              Regional Arab Climate Change Assessment Report
21                                          Regional Drought Monitoring System
20                                  North American Multi-Model Ensemble (NMME)
19                                                               Natural Earth
18                        National Aeronautics and Space Administration (NASA)
17                                 Gridded Livestock of the World (GLW4, 2015)
16                                 Gridded Livestock of the World (GLW3, 2010)
15                                              Gridded Livestock of the World
14                    Global Livestock Environmental Assessment Model (GLEAM3)
13                      FAO GIS MANAGER (GISMGR) - Test and training workspace
12                                         Global Agro-Ecological Zones (2021)
11                                         Global Agro-Ecological Zones (2015)
10 Finer Resolution Observation and Monitoring of Global Land Cover (FROM-GLC)
9                                           FAO Corporate Statistical Database
8                                     Desert Locust Monitoring and Forecasting
7                                                  Climate Risk Toolbox (CRTB)
6                                                                    CropWatch
5           Climate Hazard group InfraRed Precipitation with Stations (CHIRPS)
4                                            Copernicus Climate Change Service
3                                                         Climate Change ATLAS
2                                              Agriculture Stress Index System
1                             Global spatial database on water and agriculture</code></pre>
</div>
</div>
<p>I reversed the order of the collections vector so that you can see that there are two available WaPOR collections representing version 1 and 2, respectively. I would advise using the updated version 2 if you do not have other reasons to use the first version.</p>
<p>We can query the available products within a collection by using <code>wapor_products</code> together with the collection we wish to query.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">prods <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wapor_products</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collection =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WAPOR_2"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In total there are "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(prods), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" available products in the WAPOR_2 collection."</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "In total there are 285 available products in the WAPOR_2 collection."</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 1
 $ L1_GBWP_A:List of 2
  ..$ product:'data.frame': 1 obs. of  3 variables:
  .. ..$ code       : chr "L1_GBWP_A"
  .. ..$ caption    : chr "Gross Biomass Water Productivity"
  .. ..$ description: chr "The annual Gross Biomass Water Productivity expresses the quantity of output (total biomass production) in rela"| __truncated__
  ..$ meta   :'data.frame': 1 obs. of  12 variables:
  .. ..$ format                : chr "Raster Dataset"
  .. ..$ unit                  : chr "kg/m³ is the ratio of kg of dry matter per cubic meter of water transpired by vegetation in one hectare"
  .. ..$ dataType              : chr "Int32 (32bit Integer)"
  .. ..$ conversionFactor      : chr "the pixel value in the downloaded data must be multiplied by 0.001"
  .. ..$ noDataValue           : int -9999
  .. ..$ spatialResolution     : chr "250m (0.00223 degree)"
  .. ..$ spatialExtent         : chr "Africa and Near East"
  .. ..$ spatialReferenceSystem: chr "EPSG:4326 - WGS84 - Geographic Coordinate System (lat/long)"
  .. ..$ temporalResolution    : chr "from January 2009 to present"
  .. ..$ temporalExtent        : chr "Annual"
  .. ..$ nearRealTime          : chr "New dekadal data layers are released approximately 5 days after the end of a dekad. A higher quality version of"| __truncated__
  .. ..$ methodology           : chr "The calculation of gross biomass water productivity (GBWP) is as follows: GBWP = TBP/ETIa Where TBP is annual T"| __truncated__</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(prods)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "L1_GBWP_A" "L1_NBWP_A" "L1_AETI_A" "L1_AETI_M" "L1_AETI_D" "L1_T_A"   
 [7] "L1_E_A"    "L1_I_A"    "L1_T_D"    "L1_E_D"   </code></pre>
</div>
</div>
<p>The total number of products is relatively high. The product names consist first of the level a respective product belongs to. Level 1 means this product belongs to the continental products covering the African continent at a spatial resolution of about 250 meters. Level 2 products show a resolution of 100 meters. However, they are only available for selected countries. Finally, level 3 data is available for only a few specific agricultural regions, but the spatial resolution is about 30 meters.</p>
<p>The second component in the product name specifies the variable. For example, GBWP stands for <strong>G</strong>ross <strong>B</strong>iomass <strong>W</strong>ater <strong>P</strong>roductivity or AETI for <strong>A</strong>ctual <strong>E</strong>vapo<strong>t</strong>ranspiraton and <strong>I</strong>nterception. You can check out the <a href="https://wapor.apps.fao.org/catalog/WAPOR_2/1">WaPOR catalog</a> to see all available products, or you search through the product list as some metadata is also included in the above object.</p>
<p>The last component of a product name specifies its temporal resolution, where A stands for annual, M for monthly, D for decadal, and S for a seasonal temporal resolution.</p>
<p>Let’s assume we decided to download some level 3 data for the Office du Niger agricultural region. First, let’s take a look at the available products:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(prods)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L3_ODN"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(prods))]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "L3_ODN_GBWP_S"       "L3_ODN_NBWP_S"       "L3_ODN_AETI_A"      
 [4] "L3_ODN_AETI_M"       "L3_ODN_AETI_D"       "L3_ODN_T_A"         
 [7] "L3_ODN_E_A"          "L3_ODN_I_A"          "L3_ODN_T_D"         
[10] "L3_ODN_E_D"          "L3_ODN_I_D"          "L3_ODN_NPP_M"       
[13] "L3_ODN_NPP_D"        "L3_ODN_TBP_S"        "L3_ODN_LCC_D"       
[16] "L3_ODN_PHE_S"        "L3_ODN_QUAL_LCC_S"   "L3_ODN_QUAL_NDVI_D" 
[19] "L3_ODN_QUAL_NDVI_LT"</code></pre>
</div>
</div>
<p>For the sake of a quick example, let’s say we are interested in the actual evapotranspiration and interception for the year 2018. We can query some additional metadata about this product with the following command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">meta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wapor_metadata</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collection =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WAPOR_2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L3_ODN_AETI_A"</span>)</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(meta)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ info      :'data.frame': 1 obs. of  5 variables:
  ..$ code      : chr "WATER_MM"
  ..$ caption   : chr "Amount of Water"
  ..$ unit      : chr "mm"
  ..$ scale     : int 3
  ..$ multiplier: num 0.1
 $ dimensions:'data.frame': 1 obs. of  3 variables:
  ..$ code   : chr "YEAR"
  ..$ caption: chr "Year"
  ..$ type   : chr "TIME"
 $ meta      :'data.frame': 1 obs. of  12 variables:
  ..$ format                : chr "Raster Dataset"
  ..$ unit                  : chr "mm"
  ..$ dataType              : chr "Int32 (32bit Integer)"
  ..$ conversionFactor      : chr "the pixel value in the downloaded data must be multiplied by 0.1"
  ..$ noDataValue           : int -9999
  ..$ spatialResolution     : chr "30m"
  ..$ spatialExtent         : chr "Office du Niger, Mali"
  ..$ spatialReferenceSystem: chr "EPSG:32630 - WGS 84 / UTM zone 30N"
  ..$ temporalResolution    : chr "from January 2009 to present"
  ..$ temporalExtent        : chr "Annual"
  ..$ nearRealTime          : chr "New dekadal data layers are released approximately 5 days after the end of a dekad. A higher quality version of"| __truncated__
  ..$ methodology           : chr "See ETIa by dekad for further information. The annual total is obtained by taking the ETIa in mm/day, multiplyi"| __truncated__</code></pre>
</div>
</div>
<p>From the above, we already get a lot of useful information. For example, we see that the product is available between 2009 and the current year and is provided in a projected coordinate reference system. We also can see that the unit of the pixel values is in millimeters bit that the pixel value shall be multiplied with a scale factor of 0.1. This is essential information, and it should be checked for all WaPOR products since most of them were rescaled to reduce file size.</p>
<p>Maybe the most important aspect of the above output for the next step, is the dimensions dataframe. Here we can see that the selected product only shows one dimension called “YEAR” which type is time. Other products might have further dimensions, such as “SEASON” which needs different specification in the download call.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wapor_queryRaster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collection =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WAPOR_2"</span>,</span>
<span id="cb14-2">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L3_ODN_AETI_A"</span>,</span>
<span id="cb14-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">begin =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2018-01-01"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin date is inclusive</span></span>
<span id="cb14-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-01-01"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end date is exclusive</span></span>
<span id="cb14-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outdir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb14-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">APIkey =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WAPOR-KEY"</span>)) </span></code></pre></div>
</div>
<p>Let’s take a glimpse at the data we just downloaded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(raster)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: sp</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L3_ODN"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> T)</span>
<span id="cb17-2">r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raster</span>(file) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(r)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-10-31-wapoR/index_files/figure-html/odn-vis-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We very quickly downloaded some important data for an assessment of agricultural practices in ODN. This package’s download functionality can be used to download specific regions from Level 2 or 3 datasets by providing an sf object of an area of interest. Additionally, complete-time series can be downloaded by adapting the start and end date. Check out the <a href="https://github.com/goergen95/wapoR">README</a> of the package for another example to download some data and leave an issue if you face any problems using this package.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>raster</category>
  <category>FAO WAPOR</category>
  <category>API</category>
  <guid>https://www.dariusgoergen.com/contents/blog/2020-10-31-wapoR/index.html</guid>
  <pubDate>Sat, 31 Oct 2020 10:15:00 GMT</pubDate>
  <media:content url="https://www.dariusgoergen.com/contents/blog/2020-10-31-wapoR/wapor.png" medium="image" type="image/png" height="75" width="144"/>
</item>
<item>
  <title>Running docker-compose with postgis and R-Studio</title>
  <dc:creator>Darius A. Görgen</dc:creator>
  <link>https://www.dariusgoergen.com/contents/blog/2020-06-21-docker.md/index.html</link>
  <description><![CDATA[ 



<p>In this tutorial, I am going to show how you can use the docker engine to set up two containers, one hosting the <a href="https://hub.docker.com/r/rocker/geospatial">rocker/geospatial</a> image and the other one the <a href="https://hub.docker.com/r/postgis/postgis">postgis/postgis</a> image. We will use docker-compose to start up both containers to work with the r-spatial packages and postgis functionality simultaneously in a stable environment. I assume here that the necessary dependencies such as the <a href="https://docs.docker.com/get-docker/">docker</a> and <a href="https://docs.docker.com/compose/install/">docker-compose</a> engines are already met.</p>
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-06-21-docker.md/https:/www.osgeo.org/wp-content/uploads/postgis-logo-1.png" class="img-fluid" alt="PostGIS Logo"> <img src="https://www.dariusgoergen.com/contents/blog/2020-06-21-docker.md/https:/secure.gravatar.com/avatar/5809d093183fe6ca0174066078054949.jpg?s=80&amp;r=g&amp;d=mm" class="img-fluid" alt="Rocker Logo"></p>
<p>What we need is a simple <code>.yaml</code> file that defines the parameters of our application. In the example I will demonstrate, the application consists of two services, namely the postigs server and the R-Studio instance. We start with the postgres service by defining which images we are using. This image is found at <a href="https://hub.docker.com/">dockerhub</a> If the images are not found on the local machine, they are pulled from there once we run our application. We also make the container’s naming explicit by using the <em>container_name</em> option and set the restart behavior to <em>always</em> in cases the container breaks down. We also ensure that the container will set up a new user besides the default <em>postgres</em> user by specifying a username and a password. The last part specifies on the left hand the local path on the host machine where the database files are going to be written two, while the right-hand part links to the data directory within the postgis container.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">postgres</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgis/postgis</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_USER</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgis</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_PASSWORD</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgis</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 8888:5432</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ~/pgdata:/var/lib/postgresql/data</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rstudio</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> rocker/geospatial</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-studio</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> USER=rstudio</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PASSWORD=supersecret</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ROOT=TRUE</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 8787:8787</span></span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">links</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres</span></span></code></pre></div>
<p>For the R-Studio service, we use the geospatial image that comes in very handy in cases you want to do geospatial analysis since a large number of important packages already come preinstalled. We also make the naming of the container explicit and set the restart behavior to <em>always</em>. The rocker images are quite restrictive when it comes to user rights management. Thus, in addition to specifying a user and a password, we also want to enable root access for the case we need to install additional software. This way, our user is added to the sudoer list. However, this option should be treated carefully. We also map a port on the host machine to the exposed port of the container. This way, we can reach the interface by simply accessing <em>http://localhost:8787/</em> in the browser of our choice. Finally, we declare that the <em>posgres</em> service is linked to the <em>rstudio</em> service. This means that inside the rstudio container, an entry to <em>/etc/hosts</em> called postgres is added, linking to the IP-address this container is found.</p>
<p>When we write the above configuration to a file called <em>docker-compose.yaml</em> starting the application is as simple as running the following command in a shell in the same directory the file is found:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> up</span></code></pre></div>
<p>Once the services are up and running, visit <em>http://localhost:8787/</em> and enter the username and password for the rstudio service. From here, we can use the <em>RPostgreSQL</em> and <em>RPostgres</em> library to connect to our data base. In the simple example below, we establish a connection and write an sf-Object shipped with the <em>sf</em> package to the database.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RPostgreSQL)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RPostgres)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify connection inputs</span></span>
<span id="cb3-6">db <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'postgis'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># provide the name of your db</span></span>
<span id="cb3-7">host_db <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgres"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># provide the name of the service</span></span>
<span id="cb3-8">db_port <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5432'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify the port the service is available at</span></span>
<span id="cb3-9">db_user <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgis"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify username</span></span>
<span id="cb3-10">db_password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgis"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify password</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># establish the connection</span></span>
<span id="cb3-12">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(), </span>
<span id="cb3-13">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname=</span>db, </span>
<span id="cb3-14">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host=</span>host_db, </span>
<span id="cb3-15">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port=</span>db_port, </span>
<span id="cb3-16">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user=</span>db_user, </span>
<span id="cb3-17">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password=</span>db_password)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read sample shapefile</span></span>
<span id="cb3-20">shape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_read</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpkg/nc.gpkg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>))</span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write to database in a new table specified by the layer argument</span></span>
<span id="cb3-22">table_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span></span>
<span id="cb3-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obj =</span> shape, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dsn =</span> con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer =</span> table_name)</span></code></pre></div>
<p>Since we mapped the data directory to a local directory on our host machine, the data we write into the database is persistent even when the application is no longer running. To query our database now or even after restarting the application we can use more sf functionality to interact with it. Here is a simple example comparing dplyr syntax with the result we obtain from querying the database to unify all polygons which have the same entry in the ‘SID74’ variable.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dplyr way of </span></span>
<span id="cb4-4">shape_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shape <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(SID74) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AREA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(AREA, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb4-7"></span>
<span id="cb4-8">shape_postgis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_read</span>(con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT "SID74", SUM("AREA") as "AREA", ST_UNION(geom) as geom </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb4-9">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FROM </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb4-10">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GROUP BY "SID74";'</span>)), table_name)</span></code></pre></div>
<p>But how can we manage our postgis server now? There are two ways (well, actually three ways I’ll explain in a minute) how we can access the server. The first one is using psql from the host machine. In the configuration file, we specified that the postgis containers port is mapped to the host machine’s port 8888. Well, we simply use that information to connect to the database using psql.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">psql</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span> localhost <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span> 8888 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dbname</span> postgres <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> postgis</span></code></pre></div>
<p>The command line will ask us for the password, and then we are connected. Additionally, we can also choose to use a program with a graphical user interface to manage the data base. One which ich highly recommend is <a href="https://www.pgadmin.org/">pgAdmin</a>. After installing and running the program, we have to specify a new connection. After adding a name for the connection in the <em>General</em> tab we switch to the <em>Connection</em> tab and fill in all the information as in the screenshot below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-06-21-docker.md/pgAdmin.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">pgAdmin settings tab</figcaption>
</figure>
</div>
<p>You already guessed the third option I promised you before? Well of course we can use the psql approach explained above from the terminal in our R-Studio container. Of course, the hostname will be slightly different, but the basic idea is the same. Now, it comes in handy that we have root access in the R-Studio container, because we are going to need to install external software first, namely the postgres client. Thus we enter the following two lines into the terminal. Enter <em>Yes</em> in case you are asked if you wanted to install the software.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install postgresql-client</span></code></pre></div>
<p>Now our container has the psql command installed and we can use a slightly different version of the above command to connect to the databse.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">psql</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span> postgres <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span> 5432 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dbname</span> postgres <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> postgis</span></code></pre></div>
<p>What are the differences here? Well, first the container is not found at <em>localhost</em> but as explained before we have got an entry in the <em>/etc/hosts</em> file for our container name <em>postgres</em>. Additionally, we are connecting directly to the container and not to the mapped port on our host machine which is why we have to specify 5432 as the right port. Besides that, everything remains the same.</p>



 ]]></description>
  <category>R</category>
  <category>docker</category>
  <category>PostgreSQL</category>
  <guid>https://www.dariusgoergen.com/contents/blog/2020-06-21-docker.md/index.html</guid>
  <pubDate>Sun, 21 Jun 2020 11:19:00 GMT</pubDate>
  <media:content url="https://i0.wp.com/o2r.info/public/images/rocker-logo.png?w=200&amp;ssl=1" medium="image"/>
</item>
<item>
  <title>Translating EUMETSAT’s .nat files to GTiff</title>
  <dc:creator>Darius A. Görgen</dc:creator>
  <link>https://www.dariusgoergen.com/contents/blog/2020-06-14-nat2tif/index.html</link>
  <description><![CDATA[ 



<p>In this tutorial, I am using Python to translate a Meteosat Second Generation (MSG) Native Archive Format (.nat) file to GTiff. Conveniently, there exists a driver support for these files in both, the <a href="https://gdal.org/drivers/raster/msgn.html">gdal</a> and the <a href="https://satpy.readthedocs.io/en/latest/index.html">satpy</a> library. Here, we are going to use satpy because we also want to resample the data with its “associated” library <a href="https://pyresample.readthedocs.io/en/latest/">pyresample</a>. First, we will load all the libraries we are going to need into our Python session.</p>
<div id="libs" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> osgeo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gdal</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> osgeo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> osr</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyresample <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pr</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> satpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Scene</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<p>As opposed to BUFR files, reading <em>.nat</em> files is quite straightforward. All we need to do is handing the right reader to the satpy <em>Scene</em> function. We can then take a look at the available datasets.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MSG1-SEVI-MSG15-0100-NA-20160531090417.660000000Z-20160531090437-1405098.nat"</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define reader</span></span>
<span id="cb2-3">reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seviri_l1b_native"</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read the file</span></span>
<span id="cb2-5">scn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Scene(filenames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {reader:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>]})</span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract data set names</span></span>
<span id="cb2-7">dataset_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scn.all_dataset_names()</span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print available datasets</span></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, dataset_names)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HRV
IR_016
IR_039
IR_087
IR_097
IR_108
IR_120
IR_134
VIS006
VIS008
WV_062
WV_073</code></pre>
</div>
</div>
<p>The MSG data is provided as Full Disk, meaning that roughly the complete North-South extent of the globe from the Atlantic to the Indian Ocean is present in each file. For most applications and research questions, it is not necessary to process an extent that large. This is why as an example, we are going to resample the data to the extent of Spain. For this, we are using functionality from the <em>pyresample</em> library, which allows users to create customized area definitions.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create some information on the reference system</span></span>
<span id="cb4-2">area_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spain"</span></span>
<span id="cb4-3">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Geographical Coordinate System clipped on Spain"</span></span>
<span id="cb4-4">proj_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spain"</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specifing some parameters of the projection</span></span>
<span id="cb4-6">proj_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proj"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longlat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ellps"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WGS84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datum"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WGS84"</span>}</span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the width and height of the aoi in pixels</span></span>
<span id="cb4-8">llx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lower left x coordinate in degrees</span></span>
<span id="cb4-9">lly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.9</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lower left y coordinate in degrees</span></span>
<span id="cb4-10">urx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upper right x coordinate in degrees</span></span>
<span id="cb4-11">ury <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">43.8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upper right y coordinate in degrees</span></span>
<span id="cb4-12">resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target resolution in degrees</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculating the number of pixels</span></span>
<span id="cb4-14">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((urx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> llx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> resolution)</span>
<span id="cb4-15">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((ury <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lly) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> resolution)</span>
<span id="cb4-16">area_extent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (llx,lly,urx,ury)</span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defining the area</span></span>
<span id="cb4-18">area_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.geometry.AreaDefinition(area_id, proj_id, description, proj_dict, width, height, area_extent)</span>
<span id="cb4-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(area_def)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Area ID: Spain
Description: Spain
Projection ID: Geographical Coordinate System clipped on Spain
Projection: {'datum': 'WGS84', 'no_defs': 'None', 'proj': 'longlat', 'type': 'crs'}
Number of columns: 2560
Number of rows: 1579
Area extent: (-9.5, 35.9, 3.3, 43.8)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/darius/Desktop/website/new/py-env/lib/python3.10/site-packages/pyproj/crs/crs.py:1282: UserWarning: You will likely lose important projection information when converting to a PROJ string from another format. See: https://proj.org/faq.html#what-is-the-best-format-for-describing-coordinate-reference-systems
  proj = self._crs.to_proj4(version=version)</code></pre>
</div>
</div>
<p>We will show here how to proceed when we want to extract more than one specific data set. We can either apply a for loop over the desired datasets we need or write a general function that can extract the data for any specified variable. Here we are going forward with the latter approach because a function is more reusable than a simple script.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nat2tif(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, calibration, area_def, dataset, reader, outdir, label, dtype, radius, epsilon, nodata):</span>
<span id="cb7-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open the file</span></span>
<span id="cb7-3">  scn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Scene(filenames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {reader: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>]})</span>
<span id="cb7-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let us check that the specified data set is actually available</span></span>
<span id="cb7-5">  scn_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scn.all_dataset_names()</span>
<span id="cb7-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># raise exception if dataset is not present in available names</span></span>
<span id="cb7-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> scn_names:</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Specified dataset is not available."</span>)</span>
<span id="cb7-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to load the data, different calibration can be chosen</span></span>
<span id="cb7-10">  scn.load([dataset], calibration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calibration)</span>
<span id="cb7-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let us extract the longitude and latitude data</span></span>
<span id="cb7-12">  lons, lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scn[dataset].area.get_lonlats()</span>
<span id="cb7-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we can apply a swath definition for our output raster</span></span>
<span id="cb7-14">  swath_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.geometry.SwathDefinition(lons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lons, lats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lats)</span>
<span id="cb7-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and finally we also extract the data</span></span>
<span id="cb7-16">  values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scn[dataset].values</span>
<span id="cb7-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we will now change the datatype of the arrays</span></span>
<span id="cb7-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># depending on the present data this can be changed</span></span>
<span id="cb7-19">  lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lons.astype(dtype)</span>
<span id="cb7-20">  lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lats.astype(dtype)</span>
<span id="cb7-21">  values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values.astype(dtype)</span>
<span id="cb7-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we can already resample our data to the area of interest</span></span>
<span id="cb7-23">  values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.kd_tree.resample_nearest(swath_def, values,</span>
<span id="cb7-24">                                             area_def,</span>
<span id="cb7-25">                                             radius_of_influence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in meters</span></span>
<span id="cb7-26">                                             epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epsilon,</span>
<span id="cb7-27">                                             fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we are going to check if the outdir exists and create it if it doesnt</span></span>
<span id="cb7-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(outdir):</span>
<span id="cb7-30">   os.makedirs(outdir)</span>
<span id="cb7-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let us join our filename based on the input file's basename                                           </span></span>
<span id="cb7-32">  outname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(outdir, os.path.basename(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(label) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb7-33">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we define some metadata for our raster file</span></span>
<span id="cb7-34">  cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-35">  rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-36">  pixelWidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols</span>
<span id="cb7-37">  pixelHeight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows</span>
<span id="cb7-38">  originX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-39">  originY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] </span>
<span id="cb7-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we actually create the file</span></span>
<span id="cb7-41">  driver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdal.GetDriverByName(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GTiff"</span>)</span>
<span id="cb7-42">  outRaster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.Create(outname, cols, rows, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># writing the metadata</span></span>
<span id="cb7-44">  outRaster.SetGeoTransform((originX, pixelWidth, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, originY, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pixelHeight))</span>
<span id="cb7-45">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating a new band and writting the data</span></span>
<span id="cb7-46">  outband <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outRaster.GetRasterBand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-47">  outband.SetNoDataValue(nodata) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#specified no data value by user</span></span>
<span id="cb7-48">  outband.WriteArray(np.array(values)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># writting the values</span></span>
<span id="cb7-49">  outRasterSRS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> osr.SpatialReference() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create CRS instance</span></span>
<span id="cb7-50">  outRasterSRS.ImportFromEPSG(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get info for EPSG 4326</span></span>
<span id="cb7-51">  outRaster.SetProjection(outRasterSRS.ExportToWkt()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set CRS as WKT</span></span>
<span id="cb7-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean up</span></span>
<span id="cb7-53">  outband.FlushCache()</span>
<span id="cb7-54">  outband <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-55">  outRaster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<p>Now we can apply this function to our input file and extract any available dataset. Note that some of the input variables need further explanation. The very first option which might not be self-evident is calibration. With this option we can tell satpy to pre-calibrate the data, for example, to reflectance in contrast to radiances. The option <em>label</em> appends the value of label to the ouput filename. With the <em>dtype</em> option, we can specifically choose which datatype is used for the output file. Accordingly, we should adopt the value for nodata, which flags no data values in the output file. The options <em>radius</em> and <em>epsilon</em> are options of the nearest neighbor resampling routine and can be specified to the user needs (see <a href="https://pyresample.readthedocs.io/en/latest/swath.html#pyresample-kd-tree">here</a> for more information).</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">nat2tif(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, </span>
<span id="cb8-2">        calibration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radiance"</span>,  </span>
<span id="cb8-3">        area_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area_def,  </span>
<span id="cb8-4">        dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HRV"</span>, </span>
<span id="cb8-5">        reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reader, </span>
<span id="cb8-6">        outdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./output"</span>,  </span>
<span id="cb8-7">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HRV"</span>, </span>
<span id="cb8-8">        dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"float32"</span>, </span>
<span id="cb8-9">        radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16000</span>, </span>
<span id="cb8-10">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, </span>
<span id="cb8-11">        nodata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.4E+38</span>)</span></code></pre></div>
</div>
<p>Now we can read in the newly created file and take a look at a simple plot to visualize our result (Note that in the background, I am using R to generate this plot quickly).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output/MSG1-SEVI-MSG15-0100-NA-20160531090417.660000000Z-20160531090437-1405098_HRV.tif"</span></span>
<span id="cb9-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdal.Open(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb9-3">band <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.GetRasterBand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> band.ReadAsArray()</span>
<span id="cb9-5">plt.imshow(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f54fa1e1c90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-06-14-nat2tif/index_files/figure-html/cell-7-output-2.png" width="588" height="368"></p>
</div>
</div>



 ]]></description>
  <category>MSG</category>
  <category>GTIFF</category>
  <category>Python</category>
  <guid>https://www.dariusgoergen.com/contents/blog/2020-06-14-nat2tif/index.html</guid>
  <pubDate>Sun, 10 May 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.dariusgoergen.com/contents/blog/2020-06-14-nat2tif/eumetsat-logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Translating EUMETSAT’s .bfr files to GTiff</title>
  <dc:creator>Darius A. Görgen</dc:creator>
  <link>https://www.dariusgoergen.com/contents/blog/2020-05-10-bufr2tif/index.html</link>
  <description><![CDATA[ 



<p>I recently came across the <a href="https://navigator.eumetsat.int/product/EO:EUM:DAT:MSG:RIIE">EUMETSAT</a> Regional Instability Index dataset, which is shipped in the less known <em>BUFR</em> format. In this tutorial, I am going to show how you can use Python to translate <em>.bfr</em> files to <em>.tiff</em> files. Besides the GDAL library for writing, we will also need the <a href="https://pyresample.readthedocs.io/en/latest/">pyresample</a> and the <a href="https://github.com/jdkloe/pybufr-ecmwf">pybufr_ecmwf</a> libraries. <em>pyresample</em> currently does not support the <em>.bfr</em> format natively. However, it is very likely to be supported in the future.</p>
<hr>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> osgeo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gdal</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> osgeo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> osr</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyresample <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pr</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pybufr_ecmwf.bufr <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BUFRReader</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<p>The <a href="https://www.wmo.int/pages/prog/www/WDM/Guides/Guide-binary-1A.html">BUFR format</a> is a standardized format defined by the World Meteorological Organization (WMO). It stands for <strong>B</strong>inary <strong>U</strong>niversal <strong>F</strong>orm for the <strong>R</strong>epresentation of meteorological data. It is a self-describing format, shipping data together with metadata to be used by end-users. Within a <em>.bfr</em> file, we find several <em>messages</em>, each of them having a specific number of <em>entries</em>. We will use the functionality of the <em>pybufr_ecmwf</em> library to read in the data.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MSG2-SEVI-MSGRIIE-0101-0101-20160526000000.000000000Z-20160526000602-1403456.bfr"</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read the file</span></span>
<span id="cb2-3">bufr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BUFRReader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, warn_about_bufr_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, expand_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display number of messages</span></span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of messages: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(bufr.num_msgs))</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initiate list with parameter names</span></span>
<span id="cb2-8">names_units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m, msg <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(bufr):</span>
<span id="cb2-10"> names_units.append(msg.get_names_and_units())</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show parameter names and units</span></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, names_units[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])))</span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close file</span></span>
<span id="cb2-15">bufr.close()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of messages: 90</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>SATELLITE IDENTIFIER
IDENTIFICATION OF ORIGINATING/GENERATING CENTRE (SEE NOTE 10)
SATELLITE CLASSIFICATION
SEGMENT SIZE AT NADIR IN X DIRECTION
SEGMENT SIZE AT NADIR IN Y DIRECTION
YEAR
MONTH
DAY
HOUR
MINUTE
SECOND
ROW NUMBER
COLUMN NUMBER
LATITUDE (HIGH ACCURACY)
LONGITUDE (HIGH ACCURACY)
SATELLITE ZENITH ANGLE
K INDEX
KO INDEX
PARCEL LIFTED INDEX (TO 500 HPA)
MAXIMUM BUOYANCY
PRECIPITABLE WATER
PER CENT CONFIDENCE
PRESSURE
PRESSURE
PRECIPITABLE WATER
PRESSURE
PRESSURE
PRECIPITABLE WATER
PRESSURE
PRESSURE
PRECIPITABLE WATER</code></pre>
</div>
</div>
<p>Based on the above output, we can decide which parameters we are interested in and which metadata we will need. Say we are only interested in the parameter <em>K Index</em>. We can see that the index for this dataset is 16. Also, since we are interested in writing a <em>.tiff</em> as output, the datasets of latitude and longitude will be of interest to us (index 13 and 14, respectively). Note that we are reopening the file once again to start from the very first message.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initiate arrays</span></span>
<span id="cb5-2">lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-3">lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-4">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reopening the file</span></span>
<span id="cb5-6">bufr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BUFRReader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, warn_about_bufr_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, expand_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop through the messages and sub-entries</span></span>
<span id="cb5-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> msg <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bufr:</span>
<span id="cb5-10"> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> msg:</span>
<span id="cb5-11">  data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs.data</span>
<span id="cb5-12">  lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(lats, data[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>])</span>
<span id="cb5-13">  lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(lons, data[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>])</span>
<span id="cb5-14">  vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(vals, data[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])</span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't forget to close the file</span></span>
<span id="cb5-16">bufr.close()</span>
<span id="cb5-17">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(vals), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999</span>, vals)</span></code></pre></div>
</div>
<p>With this loop, we obtained all the necessary data to create a <em>.tiff</em> file. We have got the values we are interested in and the geographic information of each location’s latitude and longitude data. We can now use the <em>pyresample</em> library to resample our data to a location of interest. Let’s say we are interested in a study area roughly having the extent of France. We can resample to this area by declaring an area definition first.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define some general properties of our projection</span></span>
<span id="cb6-2">area_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"France"</span></span>
<span id="cb6-3">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Custom Geographical CRS of France"</span></span>
<span id="cb6-4">proj_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"France WGS84 geographical"</span></span>
<span id="cb6-5">proj_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proj"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longlat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ellps"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WGS84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datum"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WGS84"</span>}</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the area's extent in degrees and desired resolution</span></span>
<span id="cb6-7">llx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.9</span></span>
<span id="cb6-8">lly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.2</span></span>
<span id="cb6-9">urx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.2</span></span>
<span id="cb6-10">ury <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">51.2</span></span>
<span id="cb6-11">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.015</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in degrees</span></span>
<span id="cb6-12">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((urx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> llx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> res)</span>
<span id="cb6-13">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((ury <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lly) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> res)</span>
<span id="cb6-14">area_extent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (llx,lly,urx,ury)</span>
<span id="cb6-15">area_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.geometry.AreaDefinition(area_id, proj_id, description, proj_dict, width, height, area_extent)</span>
<span id="cb6-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(area_def)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Area ID: France
Description: France WGS84 geographical
Projection ID: Custom Geographical CRS of France
Projection: {'datum': 'WGS84', 'no_defs': 'None', 'proj': 'longlat', 'type': 'crs'}
Number of columns: 873
Number of rows: 600
Area extent: (-4.9, 42.2, 8.2, 51.2)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/darius/Desktop/website/new/py-env/lib/python3.10/site-packages/pyproj/crs/crs.py:1282: UserWarning: You will likely lose important projection information when converting to a PROJ string from another format. See: https://proj.org/faq.html#what-is-the-best-format-for-describing-coordinate-reference-systems
  proj = self._crs.to_proj4(version=version)</code></pre>
</div>
</div>
<p>With this area definition, we can resample our data using the nearest neighbor algorithm and use our defined variables about the location to create a <em>.tiff</em> file as output.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">swath_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.geometry.SwathDefinition(lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lons, lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lats)</span>
<span id="cb9-2">res_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.kd_tree.resample_nearest(swath_def, vals, area_def,</span>
<span id="cb9-3">radius_of_influence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16000</span>,epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create tif output</span></span>
<span id="cb9-6">filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bufr2tif.tif"</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of rows and cols</span></span>
<span id="cb9-8">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res_data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-9">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res_data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pixel size</span></span>
<span id="cb9-11">pixelWidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols</span>
<span id="cb9-12">pixelHeight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows</span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pixel of origin</span></span>
<span id="cb9-14">originX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-15">originY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area_def.area_extent[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># driver</span></span>
<span id="cb9-17">driver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdal.GetDriverByName(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GTiff"</span>)</span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file </span></span>
<span id="cb9-19">outRaster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.Create(filename, cols, rows, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, gdal.GDT_Float32)</span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set resoultion and origin</span></span>
<span id="cb9-21">outRaster.SetGeoTransform((originX, pixelWidth, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, originY, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pixelHeight))</span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create one band</span></span>
<span id="cb9-23">outband <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outRaster.GetRasterBand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Float_64 no data value (or customize)</span></span>
<span id="cb9-25">outband.SetNoDataValue(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999</span>)</span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the resampled data to file</span></span>
<span id="cb9-27">outband.WriteArray(np.array(res_data))</span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a spatial reference system</span></span>
<span id="cb9-29">outRasterSRS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> osr.SpatialReference()</span>
<span id="cb9-30">outRasterSRS.ImportFromEPSG(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>)</span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write SRS to file</span></span>
<span id="cb9-32">outRaster.SetProjection(outRasterSRS.ExportToWkt())</span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean up</span></span>
<span id="cb9-34">outband.FlushCache()</span>
<span id="cb9-35">outband <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb9-36">outRaster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<hr>
<p>Now we can read in the newly created file and look at a simple plot to visualize our result. Note that, in the background, I am using R to generate this plot quickly.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bufr2tif.tif"</span></span>
<span id="cb10-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdal.Open(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb10-3">band <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.GetRasterBand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> band.ReadAsArray()</span>
<span id="cb10-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999.</span>, np.NaN, data)</span>
<span id="cb10-6">plt.imshow(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f4afc87fb80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.dariusgoergen.com/contents/blog/2020-05-10-bufr2tif/index_files/figure-html/cell-7-output-2.png" width="575" height="404"></p>
</div>
</div>



 ]]></description>
  <category>BUFR</category>
  <category>TIFF</category>
  <category>Python</category>
  <guid>https://www.dariusgoergen.com/contents/blog/2020-05-10-bufr2tif/index.html</guid>
  <pubDate>Fri, 01 May 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.dariusgoergen.com/contents/blog/2020-05-10-bufr2tif/eumetsat-logo.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>

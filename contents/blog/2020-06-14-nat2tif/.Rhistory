import numpy as np
from osgeo import gdal
from osgeo import osr
import pyresample as pr
from pybufr_ecmwf.bufr import BUFRReader
import matplotlib.pyplot as plt
file = "MSG2-SEVI-MSGRIIE-0101-0101-20160526000000.000000000Z-20160526000602-1403456.bfr"
# read the file
bufr = BUFRReader(file, warn_about_bufr_size = False, expand_flags = False)
# display number of messages
print("Number of messages: "+ str(bufr.num_msgs))
# initiate list with parameter names
names_units = []
for m, msg in enumerate(bufr):
names_units.append(msg.get_names_and_units())
# show parameter names and units
print('\n'.join(map(str, names_units[0][0])))
# close file
bufr.close()
# initiate arrays
lats = np.zeros([0])
lons = np.zeros([0])
vals = np.zeros([0])
# reopening the file
bufr = BUFRReader(file, warn_about_bufr_size = False, expand_flags = False)
# loop through the messages and sub-entries
for msg in bufr:
for subs in msg:
data = subs.data
lats = np.append(lats, data[:,13])
lons = np.append(lons, data[:,14])
vals = np.append(vals, data[:,16])
# don't forget to close the file
bufr.close()
# define some general properties of our projection
area_id = "France"
description = "Custom Geographical CRS of France"
proj_id = "France WGS84 geographical"
proj_dict = {"proj": "longlat", "ellps":"WGS84", "datum": "WGS84"}
# define the area's extent in degrees and desired resolution
llx = -4.9
lly = 42.2
urx = 8.2
ury = 51.2
res = 0.015 # in degrees
width = int((urx - llx) / res)
height = int((ury - lly) / res)
area_extent = (llx,lly,urx,ury)
area_def = pr.geometry.AreaDefinition(area_id, proj_id, description, proj_dict, width, height, area_extent)
print(area_def)
swath_def = pr.geometry.SwathDefinition(lons = lons, lats = lats)
res_data = pr.kd_tree.resample_nearest(swath_def, vals, area_def,
radius_of_influence=16000,epsilon=1000,fill_value=False)
# create tif output
filename = "bufr2tif.tif"
# number of rows and cols
rows = res_data.shape[0]
cols = res_data.shape[1]
# pixel size
pixelWidth = (area_def.area_extent[2] - area_def.area_extent[0]) / cols
pixelHeight = (area_def.area_extent[1] - area_def.area_extent[3]) / rows
# pixel of origin
originX = area_def.area_extent[0]
originY = area_def.area_extent[3]
# driver
driver = gdal.GetDriverByName("GTiff")
# create file
outRaster = driver.Create(filename, cols, rows, 1, gdal.GDT_Float64)
# set resoultion and origin
outRaster.SetGeoTransform((originX, pixelWidth, 0, originY, 0, pixelHeight))
# create one band
outband = outRaster.GetRasterBand(1)
# Float_64 no data value (or customize)
outband.SetNoDataValue(1.7e+38)
# write the resampled data to file
outband.WriteArray(np.array(res_data))
# create a spatial reference system
outRasterSRS = osr.SpatialReference()
outRasterSRS.ImportFromEPSG(4326)
# write SRS to file
outRaster.SetProjection(outRasterSRS.ExportToWkt())
# clean up
outband.FlushCache()
outband = None
outRaster = None
import numpy as np
from osgeo import gdal
from osgeo import osr
import pyresample as pr
from pybufr_ecmwf.bufr import BUFRReader
import matplotlib.pyplot as plt
reticulate::use_condaenv("website-env")
reticulate::repl_python()
reticulate::repl_python()
python_repl()
reticulate::repl_python()
Sys.getenv("wapor-key")
if(!"wapoR" %in% installed.packages()[,1]){
remotes::install_github("goergen95/wapoR")
}
library(wapoR)
cols = wapor_collections()
cols[rev(seq(1,nrow(cols),)),c(1:2)]
prods = wapor_products(collection = "WAPOR_2")
print(paste0("In total there are ", length(prods), " available products in the WAPOR_2 collection."))
str(prods[1])
names(prods)[1:10]
names(prods)[grep("L3_ODN", names(prods))]
meta = wapor_metadata(collection = "WAPOR_2", product = "L3_ODN_AETI_A")
str(meta)
wapor_queryRaster(collection = "WAPOR_2",
product = "L3_ODN_AETI_A",
begin = "2018-01-01", # begin date is inclusive
end = "2019-01-01", # end date is exclusive
outdir = "assets/files/",
APIkey = "8634b73a9c65d02aa9f46020dffd8445db3e11e9c3cadbdb6d232bbb1fbd001cdfbc9e4706a02dd8")
if(!"wapoR" %in% installed.packages()[,1]){
remotes::install_github("goergen95/wapoR")
}
library(wapoR)
cols = wapor_collections()
cols[rev(seq(1,nrow(cols),)),c(1:2)]
prods = wapor_products(collection = "WAPOR_2")
print(paste0("In total there are ", length(prods), " available products in the WAPOR_2 collection."))
str(prods[1])
names(prods)[1:10]
names(prods)[grep("L3_ODN", names(prods))]
meta = wapor_metadata(collection = "WAPOR_2", product = "L3_ODN_AETI_A")
str(meta)
wapor_queryRaster(collection = "WAPOR_2",
product = "L3_ODN_AETI_A",
begin = "2018-01-01", # begin date is inclusive
end = "2019-01-01", # end date is exclusive
outdir = ".",
APIkey = "8634b73a9c65d02aa9f46020dffd8445db3e11e9c3cadbdb6d232bbb1fbd001cdfbc9e4706a02dd8")
library(raster)
file = list.files(".", "L3_ODN", full.names = T)
r = raster(file) * 0.1
plot(r)
reticulate::repl_python()
